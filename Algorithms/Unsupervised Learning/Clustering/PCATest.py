import scipy.io as io
from PCA import PCA
from KMeans import KMeans
import numpy as np
from utils import plot_data, ver_imagenes, ver_3D_a_2D



"""

------------------------------------------------------------------------------------------------------------------------

                                             EJEMPLO PCA 2D a 1D

------------------------------------------------------------------------------------------------------------------------

"""


#-----------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- OBTENCION DATOS --------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

data = io.loadmat("../../../data/ex7data1.mat")
print("Columnas:", data.keys())

X = data['X']
plot_data(X)


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------- APLICACION ALGORITMO ------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

pca = PCA(X)
pca.aplicar_PCA(1, visualizar=True, proyeccion=True)



"""

------------------------------------------------------------------------------------------------------------------------

                                             EJEMPLO FACE IMAGES

------------------------------------------------------------------------------------------------------------------------

"""


#-----------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- OBTENCION DATOS --------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

data = io.loadmat("../../../data/ex7faces.mat")
print("Columnas:", data.keys())

X = data['X']

imagen = np.reshape(X, (5000, 32, 32), order='F')                       # Descomprimimos la imgen (en blanco y negro) de 1024 pixeles a 32x32
ver_imagenes(imagen[:100], 10, 10, (10, 10))                            # Visualizar las 100 primeras imagenes


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------ APLICACION ALGORITMO: REDUCCION A 36 FEATURES ------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

pca = PCA(X)
pca.aplicar_PCA(36)                                                     # Reducir de 1024 features a 36


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------------- RESULTADO -----------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

imagen_compr = np.reshape(pca.X_approx, (5000, 32, 32), order='F')      # Descomprimimos la imagen a 32x32
ver_imagenes(imagen_compr[:100], 10, 10, (10, 10))                      # Visualizar las 100 primeras imagenes


#-----------------------------------------------------------------------------------------------------------------------
#----------------------------- APLICACION ALGORITMO: REDUCCION A 100 FEATURES ------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

pca.aplicar_PCA(100)                                                    # Reducir de 1024 features a 100

#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------------- RESULTADO -----------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

imagen_compr = np.reshape(pca.X_approx, (5000, 32, 32), order='F')      # Descomprimimos la imagen a 32x32
ver_imagenes(imagen[:100], 10, 10, (8, 8))                              # Visualizar las 100 primeras imagenes de los datos originales
ver_imagenes(imagen_compr[:100], 10, 10, (8, 8))                        # Visualizar las 100 primeras imagenes de los datos comprimidos


"""

------------------------------------------------------------------------------------------------------------------------

                                        EJEMPLO 3D a 2D visualizacion

------------------------------------------------------------------------------------------------------------------------

"""

#-----------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- OBTENCION DATOS --------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

image_data = io.loadmat("../../../data/bird_small.mat")
print("Columnas datos: ", image_data.keys())

pixeles_imagen = image_data['A']
print('Dimension imagen:', pixeles_imagen.shape)

X = np.array(pixeles_imagen, dtype=float)                                                   # Obligamos a que los datos sean float


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------- INICIALIZACION VARIABLES --------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

k= 16

X /= 255                                                                                    # Hacemos que su valor este en 0 y 1
X = np.reshape(X, (-1, 3))                                                                  # Comprimimos los pixeles en una sola dimension
print('Dimension imagen:', X.shape)


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------- APLICACION ALGORITMO ------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

kmeans = KMeans(X, k)
kmeans.fit()


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------- OBTENCION DE IMAGEN -------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------


X_comprimido = kmeans.X.copy()                                                              # Obtenemos una copia de los datos originales
X_comprimido[np.arange(kmeans.indices.shape[0]), :] = kmeans.centroids[kmeans.indices, :]   # Asignamos el color que le corresponde a cada X_comprimido

pca = PCA(X)                                                                                # Aplicamos PCA para reducir la dimension
pca.aplicar_PCA(2)

ver_3D_a_2D(X_comprimido, kmeans.X, pca.z)


"""

------------------------------------------------------------------------------------------------------------------------

                            EJEMPLO PCA 2D a 1D CON CACULO DE NUMERO DE DIMENSION MINIMA

------------------------------------------------------------------------------------------------------------------------

"""


#-----------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- OBTENCION DATOS --------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

data = io.loadmat("../../../data/ex7data1.mat")
print("Columnas:", data.keys())

X = data['X']
plot_data(X)


#-----------------------------------------------------------------------------------------------------------------------
#------------------------------------------- APLICACION ALGORITMO ------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------

pca = PCA(X)
pca.aplicar_PCA(None, visualizar=True, proyeccion=True, limite_varianza=0.2)


